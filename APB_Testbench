//***************************** APB UVM TESTBENCH ***************************************//


`timescale 1ns / 1ps
 
`include "uvm_macros.svh"
 import uvm_pkg::*;

//------------------- INTERFACE ----------------------------//
interface apb_if;

  bit        pclk;
  bit        presetn;
  logic [31:0] paddr;
  logic        psel;
  logic        penable;
  logic        pwrite;
  logic [31:0] pwdata;
  logic [31:0] prdata;
  logic        pready;
  logic        pslverr;

  // Clocking block for driver (output signals to DUT)
  clocking drv_cb @(posedge pclk);
    default input #1step output #1step;
    output paddr, psel, penable, pwrite, pwdata;
    input  prdata, pready, pslverr;
  endclocking

  // Clocking block for monitor (input signals from DUT)
  clocking mon_cb @(posedge pclk);
    default input #1step output #1step;
    input paddr, psel, penable, pwrite, pwdata, prdata, pready, pslverr;
  endclocking

  // Modport for driver
  modport DRIVER (
    clocking drv_cb,
    input    pclk,
    output   presetn
  );

  // Modport for monitor
  modport MONITOR (
    clocking mon_cb,
    input    pclk, presetn
  );

       //--------------------ASSERTION---------------------------
      sequence SETUP;
        $rose(psel) && $stable(penable);
      endsequence
      
      sequence ACCESS;
        $rose(penable) && $stable(psel);
      endsequence
      
      sequence IDLE;
        $fell(psel) && $fell(penable);
      endsequence

      property set_to_access;
        @(posedge pclk) disable iff(!presetn)
        SETUP |=> ACCESS;
      endproperty
      
      property access_to_idle;
        @(posedge pclk) disable iff(!presetn)
        ACCESS |=> ##[0:5]IDLE;
      endproperty
      
       property rcv_ready;
        @(posedge pclk) disable iff(!presetn)
         penable |=> ##[0:5]pready;
      endproperty
      
      assert property(set_to_access)
        $display("setup to access Passed");
      else
        $error("Assertion failed");
        
      assert property(access_to_idle)
        $display("access to idle Passed");
      else
        $error("Assertion failed");
      
        assert property(rcv_ready)
        $display("Ready Passed");
      else
        $error("Assertion failed");
        
   //-------x to z checker-----------------------------------
        X_Z_checker_for_psel :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(psel)));
        X_Z_checker_for_penable :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(penable)));
          X_Z_checker_for_pready :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(pready)));
            X_Z_checker_for_pwrite :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(pwrite)));
              X_Z_checker_for_paddr :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(paddr)));
                X_Z_checker_for_pwdata :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(pwdata)));
                  X_Z_checker_for_prdata :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(prdata)));
        X_Z_checker_for_pslverr :assert property(@(posedge pclk) disable iff(!presetn) (!$isunknown(pslverr)));
                  
endinterface
////--------------------------------------

 
 
//------------------- CONFIG CLASS ----------------------------//
class abp_config extends uvm_object; /////configuration of env
  `uvm_object_utils(abp_config)
  
  virtual apb_if vif;
  
  function new(string name = "abp_config");
    super.new(name);
  endfunction
  
  uvm_active_passive_enum is_active = UVM_ACTIVE;
  
endclass
 

//------------------- TRANSACTION CLASS ----------------------------//
 
 
typedef enum bit [1:0]   {readd = 0, writed = 1, rst = 2} oper_mode;
//////////////////////////////////////////////////////////////////////////////////
 
class transaction extends uvm_sequence_item;
    
    rand oper_mode   op;
    rand bit            	PWRITE;
    rand logic [31 : 0]   	PWDATA;
    rand logic [31 : 0]	  	PADDR;
	
    // Output Signals of DUT for APB UART's transaction
	logic				    PREADY;
	logic  				    PSLVERR;
  logic [31: 0]		    PRDATA;
 
        `uvm_object_utils_begin(transaction)
        `uvm_field_int (PWRITE,UVM_ALL_ON)
        `uvm_field_int (PWDATA,UVM_ALL_ON)
        `uvm_field_int (PADDR,UVM_ALL_ON)
        `uvm_field_int (PREADY,UVM_ALL_ON)
        `uvm_field_int (PSLVERR,UVM_ALL_ON)
        `uvm_field_int (PRDATA,UVM_ALL_ON)
        `uvm_field_enum(oper_mode, op, UVM_DEFAULT)
        `uvm_object_utils_end
  
  constraint addr_c { PADDR <= 15; }
  constraint wdata_c { PWDATA <= 15; }
  constraint addr_c_err { PADDR == 32'hffff_ffff;}		//> 31; }
 
  function new(string name = "transaction");
    super.new(name);
  endfunction
 
endclass : transaction


//------------------- COVERAGE CLASS ----------------------------//
   class apb_coverage extends uvm_subscriber #(transaction);
  `uvm_component_utils(apb_coverage)

  transaction trans;

  // Virtual interface handle
  //virtual apb_if monitor_if;

  // Covergroup sampling on pclk
     covergroup apb_cg;		// @(posedge monitor_if.MONITOR.pclk);
    option.per_instance = 1;

    coverpoint trans.PADDR {
      bins addr_low  = {[0:8]};
      bins addr_high = {[9:15]};
      bins addr_err  = {32'hffff_ffff};
    }

    coverpoint trans.PWDATA {
      bins data_low  = {[0:8]};
      bins data_high = {[9:15]};
    }

    coverpoint trans.PWRITE {
      bins read_op  = {0};
      bins write_op = {1};
    }
    
  coverpoint trans.PSLVERR {
    bins no_error = {0};
    bins error    = {1};
  }

    coverpoint trans.op {
      bins read   = {readd};
      bins write  = {writed};
      bins reset  = {rst};
    }

    cross trans.PWRITE, trans.PADDR;
    cross trans.op, trans.PWDATA;
  endgroup

  function new(string name, uvm_component parent);
    super.new(name, parent);
    apb_cg = new;
  endfunction

  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    trans = transaction::type_id::create("trans", this);
 

    // Get the virtual interface handle
  //  if (!uvm_config_db#(virtual apb_if)::get(this, "", "vif", monitor_if)) begin
  //    `uvm_fatal("NOVIF", "Virtual interface not set in config DB")
  //  end 
  endfunction

  // Built-in subscriber method to sample data
  virtual function void write(transaction t);
    this.trans = t;
    apb_cg.sample();
  endfunction
     
virtual function void extract_phase(uvm_phase phase);
  super.extract_phase(phase);

  // Print total samples of covergroup (not 'write')
  `uvm_info("COV", $sformatf("Total samples captured for coverage: %f", apb_cg.get_inst_coverage()), UVM_NONE)

  // Print last transaction sampled
  `uvm_info("COV", $sformatf("Last transaction => op: %s, paddr: %0h, pwdata: %0h, prdata: %0h, pslverr: %0b",
    trans.op.name(), trans.PADDR, trans.PWDATA, trans.PRDATA, trans.PSLVERR), UVM_NONE)
endfunction

endclass


//------------------- ALL SEQUENCE CLASS ----------------------------//

class write_data extends uvm_sequence#(transaction);
  `uvm_object_utils(write_data)
  
  transaction tr;
 
  function new(string name = "write_data");
    super.new(name);
  endfunction
  
  virtual task body();
    repeat(15)
      begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(1);//enable 
        tr.addr_c_err.constraint_mode(0);//disable
        start_item(tr);
        assert(tr.randomize);
        tr.op = writed;
        finish_item(tr);
      end
  endtask
  
 
endclass

//////////////////////////////////////////////////////////

class read_data extends uvm_sequence#(transaction);
  `uvm_object_utils(read_data)
  
  transaction tr;
 
  function new(string name = "read_data");
    super.new(name);
  endfunction
  
  virtual task body();
    repeat(15)
      begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(1);
        tr.addr_c_err.constraint_mode(0);//disable
        start_item(tr);
        assert(tr.randomize);
        tr.op = readd;
        finish_item(tr);
      end
  endtask
  
 
endclass
  
/////////////////////////////////////////////
 
class write_read extends uvm_sequence#(transaction); //////read after write
  `uvm_object_utils(write_read)
  
  transaction tr;
 
  function new(string name = "write_read");
    super.new(name);
  endfunction
  
  virtual task body();
    repeat(15)
      begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(1);
        tr.addr_c_err.constraint_mode(0);
        
        start_item(tr);
        assert(tr.randomize);
        tr.op = writed;
        finish_item(tr);
        
        start_item(tr);
        assert(tr.randomize);
        tr.op = readd;
        finish_item(tr);
 
      end
  endtask
  
 
endclass


///////////////write bulk read bulk//////////////////

class writeb_readb extends uvm_sequence#(transaction);
  `uvm_object_utils(writeb_readb)
  
  transaction tr;
 
  function new(string name = "writeb_readb");
    super.new(name);
  endfunction
  
  virtual task body();
    fork
    repeat(15) begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(1);
        tr.addr_c_err.constraint_mode(0);
        
        start_item(tr);
        assert(tr.randomize);
        tr.op = writed;
        finish_item(tr);
      
      
    end
      
      
    repeat(15) begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(1);
        tr.addr_c_err.constraint_mode(0);
        
        start_item(tr);
        assert(tr.randomize);
        tr.op = readd;
        finish_item(tr);
      
    end
    join
  endtask
  
 
endclass
 
//////////////////////slv_error_write///////////////////////////

class write_err extends uvm_sequence#(transaction);
  `uvm_object_utils(write_err)
  
  transaction tr;
 
  function new(string name = "write_err");
    super.new(name);
  endfunction
  
  virtual task body();
    repeat(15)
      begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(0);
        tr.addr_c_err.constraint_mode(1);
        
        start_item(tr);
        assert(tr.randomize);
        tr.op = writed;
        finish_item(tr);
      end
  endtask
  
 
endclass

/////////////////////////read err/////////////////////////////
  
class read_err extends uvm_sequence#(transaction);
  `uvm_object_utils(read_err)
  
  transaction tr;
 
  function new(string name = "read_err");
    super.new(name);
  endfunction
  
  virtual task body();
    repeat(15)
      begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(0);
        tr.addr_c_err.constraint_mode(1);
        
        start_item(tr);
        assert(tr.randomize);
        tr.op = readd;
        finish_item(tr);
      end
  endtask
  
 
endclass
 
////////////////////////RESET ///////////////////////////////
 
class reset_dut extends uvm_sequence#(transaction);
  `uvm_object_utils(reset_dut)
  
  transaction tr;
 
  function new(string name = "reset_dut");
    super.new(name);
  endfunction
  
  virtual task body();
    repeat(15)
      begin
        tr = transaction::type_id::create("tr");
        tr.addr_c.constraint_mode(1);
        tr.addr_c_err.constraint_mode(0);
        
        start_item(tr);
        assert(tr.randomize);
        tr.op = rst;
        finish_item(tr);
      end
  endtask
  
 
endclass
 
 
//------------------- DRIVER CLASS ----------------------------//

class driver extends uvm_driver #(transaction);
  `uvm_component_utils(driver)
  
  virtual apb_if vif;
  transaction tr;
  
  
  function new(input string path = "drv", uvm_component parent = null);
    super.new(path,parent);
  endfunction
  
 virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
     tr = transaction::type_id::create("tr");
      
      if(!uvm_config_db#(virtual apb_if)::get(this,"","vif",vif))//uvm_test_top.env.agent.drv.aif
      `uvm_error("drv","Unable to access Interface");
  endfunction
    
  
  task reset_dut();
 
    //repeat(5) 
    //begin
    vif.presetn   <= 1'b0;
    vif.paddr     <= 'h0;
    vif.pwdata    <= 'h0;
    vif.pwrite    <= 'b0;
    vif.psel      <= 'b0;
    vif.penable   <= 'b0; 
     `uvm_info("DRV", "System Reset : Start of Simulation", UVM_MEDIUM);
    repeat(5) @(posedge vif.pclk);
    vif.presetn <= 1'b1;
      //end
  endtask
  
  task drive();
    reset_dut();
   forever begin
     
         seq_item_port.get_next_item(tr);
     
     
                   if(tr.op ==  rst)
                          begin
                            vif.presetn   <= 1'b0;
                            vif.paddr     <= 'h0;
                            vif.pwdata    <= 'h0;
                            vif.pwrite    <= 'b0;
                            vif.psel      <= 'b0;
                            vif.penable   <= 'b0;
                            repeat(2) @(posedge vif.pclk);
                            vif.presetn   <= 1'b1;
                            @(posedge vif.pclk);
                          end
 
                  else if(tr.op == writed)
                          begin
                            vif.psel    <= 1'b1;
                            vif.paddr   <= tr.PADDR;
                            vif.pwdata  <= tr.PWDATA;
                            vif.pwrite  <= 1'b1;
                            @(posedge vif.pclk);
                            vif.penable <= 1'b1;
     `uvm_info("DRV", $sformatf("mode:%0s, addr:%0d, wdata:%0d, rdata:%0d, slverr:%0d",tr.op.name(),tr.PADDR,tr.PWDATA,tr.PRDATA,tr.PSLVERR), UVM_NONE);
                            wait(vif.pready);
                            @(posedge vif.pclk);
                            {vif.psel,vif.penable}  <= 2'b00;
                            tr.PSLVERR   <= vif.pslverr;
                             @(posedge vif.pclk); 
                          end
     
                      else if(tr.op ==  readd)
                          begin
                            vif.psel    <= 1'b1;
                            vif.paddr   <= tr.PADDR;
                            vif.pwrite  <= 1'b0;
                            @(posedge vif.pclk);
                            vif.penable <= 1'b1;
     `uvm_info("DRV", $sformatf("mode:%0s, addr:%0d, wdata:%0d, rdata:%0d, slverr:%0d",tr.op.name(),tr.PADDR,tr.PWDATA,tr.PRDATA,tr.PSLVERR), UVM_NONE);
                            wait(vif.pready);
                            @(posedge vif.pclk);
                            {vif.psel,vif.penable}  <= 2'b00;
                            tr.PRDATA     = vif.prdata;
                            tr.PSLVERR    = vif.pslverr;
                            @(posedge vif.pclk);
                          end
       seq_item_port.item_done();
     
   end
  endtask
  
 
  virtual task run_phase(uvm_phase phase);
    drive();
  endtask
 
endclass
 
//------------------- MONITOR ----------------------------//
 
class mon extends uvm_monitor;
`uvm_component_utils(mon)
 
uvm_analysis_port#(transaction) send;
transaction tr;
virtual apb_if vif;
apb_coverage coverage;
 
    function new(input string inst = "mon", uvm_component parent = null);
    super.new(inst,parent);
    endfunction
    
    virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    tr = transaction::type_id::create("tr");
    coverage = apb_coverage::type_id::create("coverage", this);
    send = new("send", this);
      if(!uvm_config_db#(virtual apb_if)::get(this,"","vif",vif))//uvm_test_top.env.agent.drv.aif
        `uvm_error("MON","Unable to access Interface");
    endfunction
    
    
    virtual task run_phase(uvm_phase phase);
    forever begin
      @(posedge vif.pclk);
      if(!vif.presetn)
        begin
        tr.op      = rst; 
        `uvm_info("MON", "SYSTEM RESET DETECTED", UVM_NONE);
         send.write(tr);
          coverage.write(tr);
        end
      else if (vif.presetn && vif.pwrite)
         begin
          @(negedge vif.pready);
          tr.op     = writed;
          tr.PWDATA = vif.pwdata;
          tr.PADDR  =  vif.paddr;
          tr.PSLVERR  = vif.pslverr;
          `uvm_info("MON", $sformatf("DATA WRITE addr:%0d data:%0d slverr:%0d",tr.PADDR,tr.PWDATA,tr.PSLVERR), UVM_NONE); 
          send.write(tr);
          coverage.write(tr);
         end
      else if (vif.presetn && !vif.pwrite)
         begin
           @(negedge vif.pready);
          tr.op     = readd; 
          tr.PADDR  =  vif.paddr;
          tr.PRDATA   = vif.prdata;
          tr.PSLVERR  = vif.pslverr;
          `uvm_info("MON", $sformatf("DATA READ addr:%0d data:%0d slverr:%0d",tr.PADDR, tr.PRDATA,tr.PSLVERR), UVM_NONE); 
          send.write(tr);
          coverage.write(tr);
         end
    
    end
   endtask 
 
endclass
 
//------------------- SCOREBOARD ----------------------------//
 
 
class sco extends uvm_scoreboard;
`uvm_component_utils(sco)
 
  uvm_analysis_imp#(transaction,sco) recv;
  bit [31:0] arr[32] = '{default:0};
  bit [31:0] addr    = 0;
  bit [31:0] data_rd = 0;
 
 
 
    function new(input string inst = "sco", uvm_component parent = null);
    super.new(inst,parent);
    endfunction
    
    virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    recv = new("recv", this);
    endfunction
    
    
  virtual function void write(transaction tr);
    if(tr.op == rst)
              begin
                `uvm_info("SCO", "SYSTEM RESET DETECTED", UVM_NONE);
              end  
    else if (tr.op == writed)
      begin
            if(tr.PSLVERR == 1'b1)
                begin
                  `uvm_info("SCO", "SLV ERROR during WRITE OP", UVM_NONE);
                end
              else
                begin
                  arr[tr.PADDR] = tr.PWDATA;
                  `uvm_info("SCO", $sformatf("DATA WRITE OP  addr:%0d, wdata:%0d arr_wr:%0d",tr.PADDR,tr.PWDATA,  arr[tr.PADDR]), UVM_NONE);
                end
      end
    else if (tr.op == readd)
      begin
           if(tr.PSLVERR == 1'b1)
                begin
                  `uvm_info("SCO", "SLV ERROR during READ OP", UVM_NONE);
                end
              else 
                begin
                         data_rd = arr[tr.PADDR];
                 		 if (data_rd == tr.PRDATA)
                 			 `uvm_info("SCO", $sformatf("DATA MATCHED : addr:%0d, rdata:%0d",tr.PADDR,tr.PRDATA), UVM_NONE)
                         else
                           `uvm_info("SCO",$sformatf("TEST FAILED : addr:%0d, rdata:%0d data_rd_arr:%0d",tr.PADDR,tr.PRDATA,data_rd), UVM_NONE) 
                end
 
      end
     
  
    $display("----------------------------------------------------------------------------------------------------------------------------------");
    endfunction
 
endclass
 
//------------------- AGENT ----------------------------//
 
class agent extends uvm_agent;
`uvm_component_utils(agent)
  
  abp_config cfg;
 
function new(input string inst = "agent", uvm_component parent = null);
super.new(inst,parent);
endfunction
 
 driver d;
 uvm_sequencer#(transaction) seqr;
 mon m;
 
 
virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
  cfg =  abp_config::type_id::create("cfg"); 
   m = mon::type_id::create("m",this);
  
  if(cfg.is_active == UVM_ACTIVE)
   begin   
   d = driver::type_id::create("d",this);
   seqr = uvm_sequencer#(transaction)::type_id::create("seqr", this);
   end
  
  
endfunction
 
virtual function void connect_phase(uvm_phase phase);
super.connect_phase(phase);
  if(cfg.is_active == UVM_ACTIVE) begin  
    d.seq_item_port.connect(seqr.seq_item_export);
  end
endfunction
 
endclass
 
//------------------- ENVIRONMENT CLASS ----------------------------//
 
class env extends uvm_env;
`uvm_component_utils(env)
 
function new(input string inst = "env", uvm_component c);
super.new(inst,c);
endfunction
 
agent a;
sco s;
 
virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
  a = agent::type_id::create("a",this);
  s = sco::type_id::create("s", this);
endfunction
 
virtual function void connect_phase(uvm_phase phase);
super.connect_phase(phase);
a.m.send.connect(s.recv);
endfunction
 
endclass
 
//------------------- TEST CLASS ----------------------------//
 
class test extends uvm_test;
`uvm_component_utils(test)
 
function new(input string inst = "test", uvm_component c);
super.new(inst,c);
endfunction
 
env e;
write_read wrrd;
writeb_readb wrrdb;
write_data wdata;  
read_data rdata;
write_err werr;
read_err rerr;
reset_dut rstdut;  
  
virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
  e      = env::type_id::create("e",this);
  wrrd   = write_read::type_id::create("wrrd");
  wdata  = write_data::type_id::create("wdata");
  rdata  = read_data::type_id::create("rdata");
  wrrdb  = writeb_readb::type_id::create("wrrdb");
  werr   = write_err::type_id::create("werr");
  rerr   = read_err::type_id::create("rerr");
  rstdut = reset_dut::type_id::create("rstdut");
endfunction
 
virtual task run_phase(uvm_phase phase);

phase.raise_objection(this);
  //fork
  wrrd.start(e.a.seqr);
  wdata.start(e.a.seqr);
  rdata.start(e.a.seqr);
  wrrdb.start(e.a.seqr);
  werr.start(e.a.seqr);
  rerr.start(e.a.seqr);
  rstdut.start(e.a.seqr);
  //join
phase.drop_objection(this);

endtask
endclass
 
//------------------- TB TOP ----------------------------//

module tb;
    
  apb_if vif();
  
  apb_ram dut (.presetn(vif.presetn), .pclk(vif.pclk), .psel(vif.psel), .penable(vif.penable), .pwrite(vif.pwrite), .paddr(vif.paddr), .pwdata(vif.pwdata), .prdata(vif.prdata), .pready(vif.pready), .pslverr(vif.pslverr));
  
  initial begin
    vif.pclk <= 0;
  end
 
   always #10 vif.pclk <= ~vif.pclk;
 
  
  initial begin
    uvm_config_db#(virtual apb_if)::set(null, "*", "vif", vif);
    run_test("test");
   end
  
  
  initial begin    
    $dumpfile("dump.vcd");
    $dumpvars;
  end
 
  
endmodule

//*********************************************************** END TB *******************************************************//
